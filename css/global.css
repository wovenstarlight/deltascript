/* #region Constants and globals */
* { box-sizing: border-box }
/* Font initialization */
@font-face {
	font-family: "DeltaFont";
	src: url("../assets/fonts/UTDR_Monospace.ttf");
}
@font-face {
	font-family: "OpenDyslexic";
	src: url("../assets/fonts/OpenDyslexicMono-Regular.otf");
}
:root { /* Global colors and font */
	background-color: black;
	color: white;
	font-size: 1.25em;

	--maxwidth: 992px;

	--red: #ff0000;
	--blue: #0000ff;
	--yellow: #ffff00;
	--green: #00ff00;
	--white: #fff;
	--black: #000;
	--purple: #800080;
	--maroon: #800000;
	--orange: #ffa040;
	/* Custom */
	--gray: #aaa;
	--lightyellow: #ffff80;

	/* Disable anti-aliasing to get that pixel look on all images
	Retrieved from https://forum.squarespace.com/topic/240034-how-to-disable-anti-aliasing-site-wide-for-pixel-art/ */
	image-rendering: optimizeSpeed;				/* STOP SMOOTHING, GIVE ME SPEED	*/
	image-rendering: -moz-crisp-edges;			/* Firefox							*/
	image-rendering: -o-crisp-edges;			/* Opera							*/
	image-rendering: -webkit-optimize-contrast;	/* Chrome (and eventually Safari)	*/
	image-rendering: pixelated;					/* Universal support since 2021		*/
	image-rendering: optimize-contrast;			/* CSS3 Proposed					*/
	-ms-interpolation-mode: nearest-neighbor;	/* IE8+								*/
}
h1, h2, h3, h4, h5, h6 { font-weight: normal }
h2, h3, h4, h5, h6 {
	margin-block: 0.7em;
	&:first-child { margin-block-start: 0 }
	--adjacent-spacing: calc(var(--border-width) + 0.3em);

	body:not(.compact) :is(d-box, d-choices) + & { margin-block-start: var(--adjacent-spacing) }
	body:not(.compact) &:has(+ d-box, + d-choices) { margin-block-end: var(--adjacent-spacing) }
}
p, ul { /* General text */
	margin-block: 0.5em;
	&:first-child { margin-block-start: 0 }
	&:last-child { margin-block-end: 0 }
}
a { /* Global links */
	color: var(--white);
	text-decoration: 0.1em solid underline;

	/* Yellow on hover */
	&:hover, &:focus-within { color: var(--lightyellow); }
}
hr {
	border-color: var(--gray);
	margin-block: 1em;
	--adjacent-spacing: calc(var(--border-width) + 1em);

	body:not(.compact) :is(d-box, d-choices) + & {
		margin-block-start: var(--adjacent-spacing);
	}
	body:not(.compact) &:has(+ d-box, + d-choices) {
		margin-block-end: var(--adjacent-spacing);
	}
}
/* #region Color-specific classes */
.cR, .red { color: var(--red) }
.cB, .blue { color: var(--blue) }
.cY, .yellow { color: var(--yellow) }
.cG, .green { color: var(--green) }
.cW, .white { color: var(--white) }
.cX, .black { color: var(--black) }
.cP, .purple { color: var(--purple) } /* unused */
.cM, .maroon { color: var(--maroon) } /* unused */
.cO, .orange { color: var(--orange) }
.cA { color: --#00aeff }
.cs { color: --#ff80ff }
.cv { color: --#80ff80 } /* unused */
.gray { color: var(--gray) }
.lightyellow { color: var(--lightyellow) }
/* Health bar colors */
.health.kris { color: #01ffff }
.health.susie { color: #ff00ff }
.health.ralsei { color: #01ff00 }
.health.noelle { color: #ffff00 }
/* Menu portait colors */
.menu.kris { color: #00a2e8 }
.menu.susie { color: #ea79c8 }
.menu.ralsei { color: #b5e61d }
.menu.noelle { color: #ffff00 } /*same as health bar*/
/* Picked off their Dark World sprites */
.kris { color: #75fbed }
.susie { color: #f883d7 }
.ralsei { color: #4dcc8e }
.noelle { color: #ffce32 } /* actually this one is Light World */
.berdly { color: #46b3fb }
.lancer, .king { color: #78ade1 } /* lightened for readability from #406080 */
.queen { color: #00a2e8 }
/* #endregion */
/* #endregion */

/* #region Accessibility */
#skip {
	/* Placement */
	position: fixed;
	top: calc(var(--border-width) + 0.5em);
	left: 50%;
	transform: translate(-50%);
	/* Display */
	border-image: url("../assets/images/textbox/light.png") 16 / var(--border-width) / var(--border-width);
	background-color: var(--black);
	line-height: 1;
	text-decoration: none;
	z-index: 5;

	&:hover, &:focus-within { color: var(--yellow) }

	&:not(:hover, :focus-within) { /* Place it above visible screen */
		transform: translate(-50%, calc(-100% - (2 * var(--border-width) + 1em)));
	}
}
.visually-hidden {
	position: fixed;
	top: -2em;
	left: 0;
	font-size: 1em;
	margin: 0;
	padding: 0;
}
/* Settings */
#menu {
	position: fixed;
	bottom: 0;
	right: 0;
	z-index: 5;
	padding: min(0.75em, 2vmax);
	display: flex;
	flex-direction: column-reverse;
	align-items: flex-end;
	width: calc(100vw - 3em);
	max-width: 15em;
}
#openmenu {
	color: inherit;
	font: inherit;
	border: none;
	padding: 0;
	/* background-color: transparent; */
	width: fit-content;
	height: fit-content;
	cursor: pointer;

	&:is(:hover, :focus) .inactive, &:not(:hover, :focus) .active { display: none }
	img {
		display: block;
		height: 3em;
	}
}
#menucontents {
	margin: var(--border-width) calc(var(--border-width) - 0.25em);
	background-color: var(--black);
	border-image: url("../assets/images/textbox/light.png") 16 / var(--border-width) / var(--border-width);

	a, label, button {
		display: block;
		padding: 0.25em 1em;
		background-color: transparent;
		border: none;
		color: inherit;
		font: inherit;
		text-decoration: none;
		position: relative;

		&:hover, &:focus-within {
			color: var(--yellow);
			cursor: pointer;
		}

		&::before {
			content: "";
			--size: 0.6em;
			width: var(--size);
			height: var(--size);
			background: url("../assets/images/heart.png") center / contain no-repeat;
			background-size: contain;
			position: absolute;
			right: 100%;
			margin-inline-end: -1.25ch;
			top: 0.9ch;
		}

		&:not(:hover)::before { content: unset }
	}

	label.toggle {
		display: grid;
		grid-template-columns: 1fr 3ch;
		gap: 3ch;

		&::after { content: "OFF" }
		&:has(input:checked)::after { content: "ON" }
	}
}
/* #endregion */

/* #region Layout */
body {
	/* Visuals */
	background: var(--black) url("../assets/images/bg.png") center repeat fixed;
	color: var(--white);
	/* Font */
	font-family: "DeltaFont", "Courier New", Courier, monospace;
	/* font-synthesis: none; Prevent false-bolding */
	--border-width: 1rem;

	&.dyslexic {
		font-family: "OpenDyslexic", "DeltaFont", "Courier New", Courier, monospace;
		font-size: 0.875em;
		--border-width: 2em;
	}

	/* Normalize */
	margin: 0;
	min-height: 100vh;

	/* Layout */
	display: grid;
	grid-template-rows: auto 1fr auto;
}
#sitehead, #sitefoot {
	padding-inline: calc(1em + ((100vw - var(--maxwidth)) / 2));
	padding-block: 0.5em;
	background-color: var(--black);
	a { color: var(--white) }
	a:not(:hover, :focus) { text-decoration: none }
}
/* Header */
#sitehead {
	text-align: center;
}
#logo {
	font-size: 2em;
	margin: 0.25em 0.5em;
}
#sitenav {
	display: flex;
	flex-flow: row wrap;
	gap: 0.2em min(3em, 5vw);
	justify-content: center;
}
/* Content */
#main {
	justify-self: center;
	width: 100vw;
	max-width: var(--maxwidth);
	display: flex;
	flex-direction: column;
	gap: 1em;

	h1, .d-section {
		background-color: rgb(from var(--black) r g b / 0.6);
		backdrop-filter: blur(5px);
		padding: 1em;
	}

	h1 {
		text-align: center;
		margin: 0;
		padding-block: 0.5em;
	}
}
/* Footer */
#sitefoot {
	display: flex;
	justify-content: space-between;
	flex-wrap: wrap;
	text-align: center;

	p {
		margin: 0;
		padding-inline: 0.75em;
		flex-grow: 1;
	}
}
/* #endregion */

/* #region Annotations and other custom styles*/
.note {
	color: var(--gray);
	--adjacent-spacing: calc(var(--border-width) + 1em);
	body:not(.compact) :is(d-box, d-choices, d-option-panel) + & { margin-block-start: var(--adjacent-spacing) }
	body:not(.compact) &:has(+ d-box, + d-choices, + d-option-panel) { margin-block-end: var(--adjacent-spacing) }
	&:first-child, .selection-label + & { margin-block-start: 0 }
	&:last-child { margin-block-end: 0 }
}
/* #endregion */

/* #region Game styles */
d-box, d-choices {
	&:not(:state(compact)) {
		/* Space out
		 * Increase spacing between neighboring boxes to account for border outset */
		margin: var(--border-width) calc(1.5 * var(--border-width));
		:is(d-box, d-choices, d-option-panel) + & { margin-block-start: calc((2 * var(--border-width)) + 0.2em) }

		padding: 0.1em 0.2em;
		font-size: 1.3em;
		line-height: 1;
		min-height: 3.5em;
		width: 17.3em;
		max-width: 100%;
		background-color: var(--black);
		border-image: url("../assets/images/textbox/light.png") 16 / var(--border-width) / var(--border-width);

		&[theme=dark] {
			border-image-source: url("../assets/images/textbox/dark.gif");
		}
	}

	&:state(compact) {
		margin: 0 1em;
		gap: 0 0.5ch;
		align-items: baseline;
	}
}
d-box {
	display: grid;
	grid-template-columns: auto 1fr;

	&:has(&) {
		position: relative;
	}

	&:not(:state(compact)) & {
		position: absolute;
		font-size: 0.6em;
		/* Reset full-size features */
		background-color: transparent;
		border-image: unset;
		margin: 0;
		width: max-content;
		height: unset;
		/* Center content */
		align-items: center;

		d-text:first-of-type { margin-block-start: 0.5em }

		/* Specify placements (defaulting to bottom right) */
		&:not([place]), &:not([place~=bottom], [place~=top]),
		&[place~=bottom] { bottom: -0.6em }
		&:not([place]), &:not([place~=right], [place~=left]),
		&[place~=right] { right: 0 }
		&[place~=top] { top: -0.6em }
		&[place~=left] { left: 0 }
		&[place~=center-x] {
			left: 50%;
			transform: translateX(-50%);
		}
		&[place~=center-y] {
			top: 50%;
			transform: translateY(-50%);
		}
		&[place~=center] {
			left: 50%;
			top: 50%;
			transform: translate(-50%, -50%);
		}
	}

	&:state(compact) & {
		margin-inline-start: 0;
		& d-speaker::before {
			content: "(";
			color: var(--white);
		}
		& > :last-child::after { content: ")" }
	}

	&:has(> d-box:first-child) {
		grid-template-columns: 1fr;
		d-speaker::before,
		d-box > :last-child::after { content: unset }
	}
}
d-sprite {
	grid-row: 1 / span 3;
	grid-column: 1;
	d-box:state(compact) & { display: contents }

	/* Center sprite */
	d-box:not(:state(compact)) & {
		display: flex;
		align-items: center;
		margin-inline-end: 1ch;
	}

	img {
		--size: 3em;
		width: var(--size);
		height: var(--size);
		object-fit: contain;
		d-box:state(compact) & { display: none }
	}

}
d-speaker {
	color: var(--lightyellow);
	&::after { content: ":" }
	d-box:not(:state(compact)) & { display: none }
	d-box:state(compact) & {
		grid-column: 1;
		grid-row: 1 / span 3;
	}
}
d-text {
	grid-column: 2;
	line-height: 1.1;

	&[asterisk] {
		padding-inline-start: 2ch;
		text-indent: -2ch;

		&::before {
			content: "*";
			margin-inline-end: 1ch;
		}
	}
}
d-choices {
	&:not(:state(compact)) {
		display: grid;
		--side-width: 5em;
		grid-template-columns: 1fr auto 1fr;
		padding-block: 0;
		padding-inline: 1.24em 0.15em;
		align-items: center;
		position: relative;

		&:not(:state(forced)):not(:has(d-option:hover), :focus-within, :has([aria-expanded="true"])) {
			&::after {
				content: "";
				background: url("../assets/images/heart.png") center / contain no-repeat;
				width: var(--size);
				height: var(--size);
				position: absolute;
				left: 7.425em;
				top: 1.3em;
				--size: 0.6em;
			}

			&.shift-right::after { left: calc(7.425em + var(--offset)) }
			&.shift-left::after { left: calc(7.425em - var(--offset)) }
		}
	}

	d-option {
		display: block;
		width: fit-content;
		position: relative;

		/* Left/right */
		&[index="0"], &[index="1"] {
			grid-row: 1 / span 2;
			width: fit-content;
			top: -0.3em;
		}
		/* Up/down */
		&[index="2"], &[index="3"] {
			grid-column: 2;
		}

		&[index="0"] {
			grid-column: 1;
		}
		&[index="1"] {
			grid-column: 3;
			justify-self: flex-end;
		}
		&[index="2"] {
			grid-row: 1;
			align-self: flex-start;
			top: -0.1em;
		}
		&[index="3"] {
			grid-row: 2;
			align-self: flex-end;
			bottom: -0.2em;
		}

		/* Heart-shaped hover indicator */
		&::before {
			left: -1.75ch;
			top: 0.15em;
		}

		.break { display: block }

		.conditional {
			position: absolute;
			left: calc(100% + 0.2em);
			top: 0;
		}
	}

	/* In compact mode, all the options get moved alongside their tabs; hide the resulting empty menu */
	&:state(compact) { display: none }
}
d-option {
	display: block;
	cursor: pointer;
	/* Heart-shaped hover indicator */
	position: relative;

	&:hover, &:focus,
	&[aria-expanded=true] {
		color: var(--yellow);
	}
	&::before {
		content: "";
		background: center / contain no-repeat;
		width: var(--size);
		height: var(--size);
		position: absolute;
		left: -0.1em;
		top: calc(50% - (0.6 * var(--size)));
		--size: 0.6em;
	}
	&:is(:hover, :focus)::before,
	&[aria-expanded=true]::before {
		background-image: url("../assets/images/heart.png");
	}

	/* Hide the hearts/highlights when choices are forced open */
	d-choices:state(forced) &:not(:hover, :focus, [aria-expanded=true]) {
		color: var(--white);
		&::before { content: unset }
	}

	:not(d-choices) > & {
		border-image: url("../assets/images/textbox/light_transparent.png") 16 / var(--border-width) / calc(0.75 * var(--border-width)) var(--border-width);
		/* Spacing */
		margin: var(--border-width);
		& + d-option-panel + d-option { margin-block-start: calc(var(--border-width) + 0.5em) }
		/* Heart-shaped hover indicator */
		padding-inline-start: 1em;
		&::before { --size: 0.6em }

		.conditional {
			float: inline-end;
		}
	}

	.conditional {
		color: var(--gray);
		padding: 0.5em;
		margin: -0.5em;
		cursor: help;
	}

	body.compact & :is(.hide, .break) { display: none }
}
d-option-panel {
	display: block;
	border-image: url("../assets/images/textbox/light_transparent.png") 16 / var(--border-width) / var(--border-width);

	&[theme=dark] { border-image-source: url("../assets/images/textbox/dark_transparent.gif") }

	/* Spacing */
	margin:
		calc((2 * var(--border-width)) + 0.5em)
		var(--border-width)
		var(--border-width);
	d-option + & {
		margin-block:
			calc(var(--border-width) + 0.5em)
			calc(var(--border-width) + 0.2em);
		&[theme=dark] {
			margin-block:
				calc(var(--border-width) + 0.7em)
				calc(var(--border-width) + 0.4em);
		}
	}
	&:has(+ d-option) {
		margin-block-end: calc(var(--border-width) + 0.8em);
		&[theme=dark] {
			margin-block-end: calc(var(--border-width) + 1em);
		}
	}
	padding: 0.1em;

	.selection-label {
		color: var(--gray);
	}

	/* Expanded mode: hide collapsed panels, and labels when panels aren't forced */
	d-choices:not(:state(compact)) ~ &:state(collapsed),
	d-choices:not(:state(compact)) ~ &:not(:state(forced)) .selection-label,
	/* Compact mode: hide collapsed panels, and labels regardless (the toggles will act as labels instead) */
	d-choices:state(compact) ~ &:state(collapsed),
	d-choices:state(compact) ~ & .selection-label {
		display: none;
	}
}
/* #endregion */