/* #region Constants and globals */
* {
	box-sizing: border-box;
	text-underline-offset: 0.1em;
}
/* Font initialization */
@font-face {
	font-family: "DeltaFont";
	src: url("../assets/fonts/fnt_main_extended.otf");
}
@font-face {
	font-family: "DeltaFont Condensed";
	src: url("../assets/fonts/fnt_main_condensed_extended.otf");
}
@font-face {
	font-family: "DeltaFont Tiny";
	src: url("../assets/fonts/fnt_noelletiny.otf");
}
@font-face {
	font-family: "DeltaFont Comic Sans";
	src: url("../assets/fonts/fnt_comicsans.otf");
}
@font-face {
	font-family: "DeltaFont Combat";
	src: url("../assets/fonts/fnt_dotumche.otf");
}
@font-face {
	font-family: "DeltaFont 8-Bit";
	src: url("../assets/fonts/fnt_8bit.otf");
}
:root { /* Global colors and font */
	background-color: black;
	color: white;
	line-height: 1.5;
	/* Don't smooth pixels */
	image-rendering: pixelated;

	--maxwidth: 992px;

	--red: #ff0000;
	--blue: #0000ff;
	--yellow: #ffff00;
	--green: #00ff00;
	--white: #fff;
	--black: #000;
	--purple: #800080;
	--maroon: #800000;
	--orange: #ffa040;
	--lightblue: #00aeff;
	--pink: #ff80ff;
	--lightgreen: #80ff80;
	--lightyellow: #ffff80;
	/* Custom */
	--gray: #aaa;
	/* Character colors, picked off their Dark World sprites */
	--kris: #75fbed;
	--susie: #f883d7;
	--ralsei: #4dcc8e;
	--noelle: #ffce32; /* actually this one is Light World */
	--berdly: #46b3fb;
	--toriel: #7e76a8; /* lightened for readability from #5e5492 */
	--asgore: #e4ba00;
	--sans: #4782c9;
	--papyrus: #ff4711;
	--undyne: #6299c1;
	--alphys: #fdc748;
	--mettaton: #fa0ef3;
	--rudy: #d76551;
	--carol: #00a2e8;
	--lancer: #78ade1; /* lightened for readability from #406080 */
	--king: #5585bd; /* King uses the same sprite palette as Lancer so this one's actually taken from Lancer's bucket LMAO */
	--rouxls: #637de3; /* CUSTOM-PICKED, NOT FROM SPRITE; lightened for readability from #0f0062 */
	--jevil: #8a95c8; /* mixed for readability from #6d6dc0 and #a6bdd0 */
	--queen: #00a2e8;
	--friend-pink: #ffaec9;
	--friend-yellow: #fff200;
	--tenna: #da1f52;
	--eram: #f26522;
	--gerson: #65aa26;
}
/* Dim colors */
body.dim {
	--red: #bb0000;
	--blue: #0000bb;
	--yellow: #bbbb00;
	--green: #00bb00;
	--white: #bbb;
	--gray: #777;
	--black: #000;
	--purple: #5e005e;
	--maroon: #5e0000;
	--orange: #b6722e;
	--lightblue: #0077af;
	--pink: #bb5ebb;
	--lightgreen: #5ebb5e;
	--lightyellow: #bbbb80;

	--kris: #169fb5; /* CUSTOM-PICKED, NOT FROM SPRITE */
	--susie: #af67af; /* from Light World sprite */
	--ralsei: #429e76;
	--noelle: #cf9e00; /* CUSTOM-PICKED, NOT FROM SPRITE */
	--berdly: #558ed5; /* from Light World sprite */
	--toriel: #5e5492;
	--jevil: #6d6dc0;
}
/* #region Color-specific classes */
.cR, .red { color: var(--red) }
.cB, .blue { color: var(--blue) }
.cY, .yellow { color: var(--yellow) }
.cG, .green { color: var(--green) }
.cW, .white { color: var(--white) }
.cX, .black { color: var(--black) }
.cP, .purple { color: var(--purple) } /* unused */
.cM, .maroon { color: var(--maroon) } /* unused */
.cO, .orange { color: var(--orange) }
.cA, .lightblue { color: var(--lightblue) }
.cS, .pink { color: var(--pink) }
.cV, .lightgreen { color: var(--lightgreen) }
.gray { color: var(--gray) }
.lightyellow { color: var(--lightyellow) }
/* Dark World 3D effect */
[theme=dark], [theme=objbattle], [theme=battlemenu] {
	.cR, .red,
	.cB, .blue,
	.cY, .yellow,
	.cG, .green,
	.cX, .black,
	.cP, .purple,
	.cM, .maroon,
	.cO, .orange,
	.cA, .cS, .cV,
	.gray, .lightyellow {
		background: var(--mycolor) linear-gradient(rgb(from var(--white) r g b / 0.8), rgb(from var(--mycolor) r g b / 0));
		background-clip: text;
		color: transparent;
		filter: drop-shadow(1px 1px rgb(from var(--mycolor) r g b / 0.4));
	}
	.cR, .red { --mycolor: var(--red) }
	.cB, .blue { --mycolor: var(--blue) }
	.cY, .yellow { --mycolor: var(--yellow); --strength: 20% }
	.cG, .green { --mycolor: var(--green) }
	.cX, .black { --mycolor: var(--black) }
	.cP, .purple { --mycolor: var(--purple) } /* unused */
	.cM, .maroon { --mycolor: var(--maroon) } /* unused */
	.cO, .orange { --mycolor: var(--orange) }
	.cA, .lightblue { --mycolor: var(--lightblue) }
	.cS, .pink { --mycolor: var(--pink) }
	.cV, .lightgreen { --mycolor: var(--lightgreen) }
	.gray { --mycolor: var(--gray) }
	.lightyellow { --mycolor: var(--lightyellow) }
}
/* Health bar colors */
.health {
	--kris: #01ffff;
	--susie: #ff00ff;
	--ralsei: #01ff00;
	--noelle: #ffff00;
}
/* Menu portait colors */
.menu {
	--kris: #00a2e8;
	--susie: #ea79c8;
	--ralsei: #b5e61d;
	--noelle: #ffff00; /*same as health bar*/
}
.act {
	--kris: var(--lightblue);
	--susie: var(--pink);
	--ralsei: var(--lightgreen);
	--noelle: var(--lightyellow);
}
/* #region Character colors */
.kris { color: var(--kris) }
.susie { color: var(--susie) }
.ralsei { color: var(--ralsei) }
.noelle { color: var(--noelle) }
.berdly { color: var(--berdly) }
.toriel { color: var(--toriel) }
.asgore { color: var(--asgore) }
.sans { color: var(--sans) }
.papyrus { color: var(--papyrus) }
.undyne { color: var(--undyne) }
.alphys { color: var(--alphys) }
.mettaton { color: var(--mettaton) }
.rudy { color: var(--rudy) }
.carol { color: var(--carol) }
/* Chapter 1 */
.lancer { color: var(--lancer) }
.king { color: var(--king) }
.rouxls { color: var(--rouxls) }
.jevil { color: var(--jevil) }
/* Chapter 2 */
.queen { color: var(--queen) }
.spamton {
	color: transparent;
	background-image: linear-gradient(to right, var(--friend-pink), var(--friend-yellow));
	background-clip: text;
}
/* Chapter 3 */
.tenna { color: var(--tenna) }
.eram { color: var(--eram) }
/* Chapter 4 */
.gerson { color: var(--gerson) }
/* #endregion */
/* #endregion */
/* #region Font-specific classes */
.fnt-condensed { font-family: "DeltaFont Condensed", var(--font) }
.fnt-tiny { font-family: "DeltaFont Tiny", var(--font) }
.fnt-sans { font-family: "DeltaFont Comic Sans", var(--font) }
.fnt-combat { font-family: "DeltaFont Combat", var(--font) }
.fnt-eightbit, .fnt-8bit { font-family: "DeltaFont 8-Bit", var(--font) }
/* #endregion */
h1, h2, h3, h4, h5, h6 { font-weight: normal }
h2, h3, h4, h5, h6 {
	margin-block: 0.7rem;
	&:first-child { margin-block-start: 0 }
	--adjacent-spacing: 0.3rem;

	body:not(.compact) :is(d-box, d-choices) + & { margin-block-start: var(--adjacent-spacing) }
	body:not(.compact) &:has(+ d-box, + d-choices) { margin-block-end: var(--adjacent-spacing) }
}
h4, h5, h6 { padding-inline-start: 0.8rem }
h1 { font-size: 2.5em }
h2 { font-size: 2.25em }
h3 { font-size: 2em }
h4 {
	font-size: 1.5em;
	border-inline-start: 0.2rem solid;
}
h5 {
	font-size: 1.2em;
	border-inline-start: 0.2rem double;
}
h6 {
	font-size: 1em;
	color: color-mix(in srgb, var(--white), var(--gray));
	border-inline-start: 0.15rem dotted;
}
.d-section:target h2:first-child, :is(h2, h3, h4, h5, h6):target, .profile:target h3 {
	animation: 1s ease-in-out 0.4s flash;
}
@keyframes flash {
	50% { color: var(--orange) }
}
/* General text */
p, ul, ol { margin-block: 0.5em }
li { margin-block: 0.2em }
p, ul, ol, li {
	&:first-child { margin-block-start: 0 }
	&:last-child { margin-block-end: 0 }
}
p:empty {
	min-height: 1em;
	margin-block: 0;
}
li > :is(ul, ol) { margin-block-start: 0 }
a { /* Global links */
	color: var(--white);
	text-decoration: 0.1em solid underline;

	/* Yellow on hover */
	&:hover, &:focus-within { color: var(--lightyellow); }
}
hr {
	max-width: 100%;

	&:not([class]) {
		border: none;
		position: relative;
		margin-block: 2em;
		overflow: visible;
		height: 0.2em;
		background: linear-gradient(to right, var(--white) calc(50% - 3em), transparent  calc(50% - 2em) calc(50% + 2em), var(--white) calc(50% + 3em));

		&::before {
			content: "";
			display: block;
			width: 2em;
			height: 2em;
			background: url("/deltascript/assets/images/savepoint.png") center / contain no-repeat;
			position: absolute;
			left: 50%;
			top: 50%;
			transform: translate(-50%, -50%);
		}
	}

	&.hr2, &.hr3 {
		color: var(--gray);
		width: 35.4em;
		margin-inline-start: 0;
		margin-block: 1em;
	}

	&.hr3 { border-style: dashed }
}
d-box:not(:state(compact)) .text-center-expand,
.text-center { text-align: center }
img {
	max-width: 100%;
	&.box-width {
		display: block;
		width: 30em;
		padding-inline: min(2.25em, 3.5vw);

		body.compact & { margin-block: 0.5em }
	}
}
/* #region Shaky text effect */
@keyframes shake {
	0% { transform: var(--shake-state-1) }
	33% { transform: var(--shake-state-2) }
	66% { transform: var(--shake-state-3) }
	100% { transform: var(--shake-state-1) }
}
/* Do NOT break in the middle of a word.
 * Limitations: Now you gotta make bordering punctuation shake too otherwise it's prone to breaking weird */
.shake {
	display: inline-flex;
	flex-wrap: wrap;
	text-indent: 0;
	
	d-text[asterisk]:has(&) {
		text-indent: -1ch;
		&::before { display: inline-block }
	}

	[effect=shake-veryslight][asterisk]:has(&)::before, [effect=shake-veryslight] & { --intensity: 0.35 }
	[effect=shake-slight][asterisk]:has(&)::before, [effect=shake-slight] & { --intensity: 0.65 }
	[effect=shake-hard][asterisk]:has(&)::before, [effect=shake-hard] & { --intensity: 1.8 }

	body:not(.noanim) & span, body:not(.noanim) d-text[asterisk]:has(&)::before {
		animation-name: shake;
		animation-duration: 0.2s;
		animation-timing-function: steps(2, jump-none);
		animation-iteration-count: infinite;
		animation-delay: -0.45s;
	}
	body.noanim & span, body.noanim d-text[asterisk]:has(&)::before {
		font-style: italic;
	}
	.s1, d-box:nth-of-type(3n) d-text[asterisk]:has(&)::before {
		--shake-state-1: translate(calc(var(--intensity, 1) * 3.2%), calc(var(--intensity, 1) * -3.2%));
		--shake-state-2: translate(calc(var(--intensity, 1) * 2.2%), calc(var(--intensity, 1) * 0%));
		--shake-state-3: translate(calc(var(--intensity, 1) * -4%), calc(var(--intensity, 1) * 3.6%));
	}
	.s2, d-box:nth-of-type(3n+1) d-text[asterisk]:has(&)::before {
		--shake-state-1: translate(calc(var(--intensity, 1) * -0.6%), calc(var(--intensity, 1) * 3.9%));
		--shake-state-2: translate(calc(var(--intensity, 1) * -3.2%), calc(var(--intensity, 1) * -1.4%));
		--shake-state-3: translate(calc(var(--intensity, 1) * 4.8%), calc(var(--intensity, 1) * -1.2%));
	}
	.s3 {
		--shake-state-1: translate(calc(var(--intensity, 1) * 4.4%), calc(var(--intensity, 1) * 3.5%));
		--shake-state-2: translate(calc(var(--intensity, 1) * -3.8%), calc(var(--intensity, 1) * 1.8%));
		--shake-state-3: translate(calc(var(--intensity, 1) * 2.2%), calc(var(--intensity, 1) * 3%));
	}
	.s4, d-box:nth-of-type(3n+2) d-text[asterisk]:has(&)::before {
		--shake-state-1: translate(calc(var(--intensity, 1) * 4.8%), calc(var(--intensity, 1) * -0.2%));
		--shake-state-2: translate(calc(var(--intensity, 1) * -3.5%), calc(var(--intensity, 1) * -0.2%));
		--shake-state-3: translate(calc(var(--intensity, 1) * -4.2%), calc(var(--intensity, 1) * -4.6%));
	}
}
/* #endregion */
@media (max-width: 30rem) {
	body { font-size: 0.875em }
}
/* #endregion */

/* #region Accessibility */
/* Skip to main content link */
#skip {
	/* Placement */
	position: fixed;
	top: 0.5em;
	left: 50%;
	transform: translate(-50%);
	/* Display */
	border: var(--border-width) solid transparent;
	border-image: url("../assets/images/textbox/light.png") 16 / var(--border-width);
	body.dim & { border-image-source: url("../assets/images/textbox/light_dim.png") }
	background-clip: padding-box;
	background-color: var(--black);
	line-height: 1;
	text-decoration: none;
	z-index: 5;

	&:hover, &:focus-within { color: var(--yellow) }

	&:not(:hover, :focus-within) { /* Place it above visible screen */
		transform: translate(-50%, calc(-100% - (2 * var(--border-width) + 1em)));
	}
}
/* Hide from sight but not screen readers */
.visually-hidden,
header.d-section:has(h1.visually-hidden:only-child) {
	position: fixed;
	top: -2em;
	left: 0;
	font-size: 1em;
	margin: 0 !important;
	padding: 0 !important;
	white-space: pre; /* Prevent text wrapping into visibility */
}
/* "Go back" link on 404 pages */
#back404 {
	width: calc(100% - (2 * var(--border-width)));
	margin: var(--border-width);
	border-image: url("../assets/images/textbox/light.png") 16 / var(--border-width) / var(--border-width);
	body.dim & { border-image-source: url("../assets/images/textbox/light_dim.png") }
	background-color: var(--black);
	color: var(--white);
	font: inherit;
	text-align: center;
	cursor: pointer;

	&:hover, &:focus { color: var(--yellow) }
}
/* #region Settings */
#menu {
	position: fixed;
	bottom: 0;
	right: 0;
	z-index: 5;
	padding: min(0.75em, 2vmax);
	display: flex;
	flex-direction: column-reverse;
	align-items: flex-end;
}
#openmenu {
	color: inherit;
	font: inherit;
	border: none;
	padding: 0;
	background-color: transparent;
	width: fit-content;
	height: fit-content;
	cursor: pointer;

	&:is(:hover, :focus) .inactive, &:has(+ #menucontents:not([hidden])) .inactive,
	&:not(:hover, :focus, &:has(+ #menucontents:not([hidden]))) .active { display: none }
	img {
		display: block;
		height: 4em;
	}
}
#menucontents {
	width: calc(100vw - 3em);
	max-width: 17em;
	margin: var(--border-width) calc(var(--border-width) - 0.25em);
	background-color: var(--black);
	border-image: url("../assets/images/textbox/light.png") 16 / var(--border-width) / var(--border-width);
	body.dim & { border-image-source: url("../assets/images/textbox/light_dim.png") }

	a, label, button {
		display: block;
		padding: 0.25em 1em;
		background-color: transparent;
		border: none;
		color: inherit;
		font: inherit;
		text-decoration: none;
		position: relative;

		&:hover, &:focus-within {
			color: var(--yellow);
			cursor: pointer;
		}

		&::before {
			content: "";
			--size: 0.75em;
			width: var(--size);
			height: var(--size);
			background: url("../assets/images/heart.png") center / contain no-repeat;
			background-size: contain;
			position: absolute;
			right: 100%;
			margin-inline-end: -0.95ch;
			top: 0.6em;
		}

		&:not(:hover)::before { content: unset }
	}

	label.toggle {
		display: grid;
		grid-template-columns: 1fr 3ch;
		gap: 3ch;

		&::after { content: "OFF" }
		&:has(input:checked)::after { content: "ON" }
	}
}
/* #endregion */
/* Toggling animated images */
body:not(.noanim) img.animswitch[src$=".png"],
body.noanim img.animswitch[src$=".gif"] {
	display: none;
}
/* #endregion */

/* #region Layout */
body {
	/* Visuals */
	background: var(--black) url("../assets/images/bg.png") center repeat fixed;
	color: var(--white);
	/* Font */
	--font: "DeltaFont", "Courier New", Courier, monospace;
	font-family: var(--font);
	--border-width: 1.2rem;
	--baseheight: 6.5em;
	--basewidth: 24.4em;

	&.dyslexic {
		font-family: "OpenDyslexic", var(--font);
		font-size: 0.875em;
		--border-width: 2em;
	}

	/* Normalize */
	margin: 0;
	min-height: 100vh;

	/* Layout */
	display: grid;
	grid-template-rows: auto 1fr auto;
}
#sitehead, #sitefoot {
	padding-inline: calc(1em + ((100vw - var(--maxwidth)) / 2));
	padding-block: 0.5em;
	background-color: var(--black);

	a:not(:hover, :focus) { text-decoration: none }
}
/* Header */
#sitehead {
	text-align: center;
}
#logo {
	font-size: 2em;
	margin: 0.25em 0.5em;
}
#sitenav {
	display: flex;
	flex-flow: row wrap;
	gap: 0.2em min(3em, 5vw);
	justify-content: center;
}
/* Content */
#main {
	justify-self: center;
	width: 100vw;
	max-width: var(--maxwidth);
	display: flex;
	flex-direction: column;
	gap: 1em;

	.d-section {
		background-color: rgb(from var(--black) r g b / 0.6);
		backdrop-filter: blur(5px);
		padding: 1em min(1em, 3vw);
	}

	h1 {
		text-align: center;
		margin: 0;
		hyphens: auto;

		&:not(:last-child) {
			border-block-end: 0.1em solid rgb(from var(--gray) r g b / 0.1);
		}
	}
}
#pagecred, #pagedesc, #pagesrc, #pagetoc, #pageseealso {
	margin-block: 0.5em;
	&:last-child { margin-block-end: 0 }
}
#pagesrc, #pagetoc, #pageseealso {
	border: calc(var(--border-width) * 0.5) solid transparent;
	border-image: url("../assets/images/textbox/light_transparent.png") 16 / var(--border-width) / calc(0.25 * var(--border-width));
	body.dim & { border-image-source: url("../assets/images/textbox/light_transparent_dim.png") }

	summary {
		cursor: pointer;
		display: block;
		position: relative;
		padding-inline-start: 1.2em;

		&::before {
			content: "";
			background: center / contain no-repeat;
			width: var(--size);
			height: var(--size);
			position: absolute;
			left: 0;
			top: calc(50% - (0.55 * var(--size)));
			--size: 0.75em;
		}
	}
	&[open] summary, summary:hover, summary:focus {
		color: var(--yellow);
		&::before { background-image: url("../assets/images/heart.png") }
	}
}
#pagecred {
	color: var(--gray);
	font-size: 0.9em;
}
#pagesrc .code {
	font-family: "Courier New", Courier, monospace;
	font-weight: bold;
	word-break: break-word;
}
#pagesrc a:not([href]) {
	text-decoration-style: dotted;
	cursor: not-allowed;
}
#pagetoc {
	ol { counter-reset: toc }
	li {
		counter-increment: toc;
		&::marker {
			font-family: "DeltaFont Condensed", var(--font);
			content: counters(toc, ".") ".  ";
		}
	}
}
/* Footer */
#sitefoot {
	display: flex;
	justify-content: space-between;
	flex-wrap: wrap;
	text-align: center;

	p {
		margin: 0;
		padding-inline: 0.75em;
		flex-grow: 1;
	}
}
/* #endregion */

/* #region Annotations and other custom styles*/
.note {
	color: var(--gray);
	--adjacent-spacing: 1em;
	body:not(.compact) :is(d-box, d-choices, d-option-panel) + & { margin-block-start: var(--adjacent-spacing) }
	body:not(.compact) &:has(+ d-box, + d-choices, + d-option-panel) { margin-block-end: var(--adjacent-spacing) }
	&:first-child, .selection-label + & { margin-block-start: 0 }
	&:last-child { margin-block-end: 0 }

	a:not(:hover, :focus) { color: inherit }
}
/* #endregion */

/* #region Game styles */
/* Dialogue boxes and choice menus */
d-box, d-choices {
	&:not(:state(compact)) {
		/* Space out
		 * Increase spacing between neighboring boxes to account for border outset */
		margin: 0.2em 0.5em;
		:is(p, ul, ol) + & { margin-block-start: 0.5em }
		&:has(+ h2, + h3, + h4, + h5, + h6) { margin-block-end: 1em }

		padding: 0.1em 0.2em;
		font-size: 1.2em;
		line-height: 1;
		min-height: var(--baseheight);
		width: var(--basewidth);
		max-width: calc(100% - var(--border-width));
		background-color: var(--black);
		background-clip: padding-box;
		border: var(--border-width) solid transparent;
		border-image: url("../assets/images/textbox/light.png") 16 / var(--border-width);
		body.dim &:not([theme]), body.dim &[theme=light] { border-image-source: url("../assets/images/textbox/light_dim.png") }

		&[theme=dark], &[theme^=power], &[theme^=shop] {
			border-image-source: url("../assets/images/textbox/dark.gif");
			body.dim & { border-image-source: url("../assets/images/textbox/dark_dim.gif") }
		}

		&[theme=plain],
		&[theme^=obj],
		&[theme=battlemenu], &[theme=battledesc],
		&[theme=eightbit], &[theme="8bit"] {
			border-image-source: url("../assets/images/textbox/plain.png");
		}

		&[theme^=obj], &[theme=battlemenu] { width: calc(var(--basewidth) + 4em) }

		&[theme^=obj], &[theme^=power], &[theme=battledesc], &[theme=shopdesc] {
			font-family: "DeltaFont Condensed", var(--font);
		}

		&[theme=objreact] {
			display: flex;
			align-items: center;
			min-height: unset;
			width: calc(var(--basewidth + 6em));
			padding: 0;

			d-speaker {
				display: block;
				font-size: 0;

				&::before {
					content: "";
					display: block;
					margin: -0.5rem 0;
					--size: 2rem;
					width: var(--size);
					height: var(--size);
					background: center / contain no-repeat;
				}

				&.kris::before { background-image: url("../assets/images/faces/kris/battle.png") }
				&.susie::before { background-image: url("../assets/images/faces/susie/battle.png") }
				&.ralsei::before { background-image: url("../assets/images/faces/ralsei/battle.png") }
				&.noelle::before { background-image: url("../assets/images/faces/noelle/battle.png") }
			}

			d-text { margin-inline-start: 1ch }
		}

		&[theme=powertitle] { width: calc(var(--basewidth) - 11.4em) }

		&[theme=battlemenu] d-text { max-width: calc(var(--basewidth) - 2.4em) }

		&[theme=battledesc] {
			width: calc(var(--basewidth) - 17em);
			color: var(--gray);
		}

		&[theme=battletalk] {
			--border-width: 0.375em;
			border-image-source: url("../assets/images/textbox/bubble.png");
			body.dim & { border-image-source: url("../assets/images/textbox/bubble_dim.png") }
			border-image-slice: 6;
			min-height: unset;
			margin: 0.5em 1em;
			width: fit-content;
			display: flex;
			flex-direction: column;
			background-color: var(--white);
			color: var(--black);
			font-family: "DeltaFont Combat", var(--font);
			font-size: 1em;

			d-speaker {
				--lightyellow: color-mix(in srgb, var(--orange), var(--black));
				display: block;
				margin-block-end: 0.4em;

				--kris: #3b4380; /* blended for readability from too-dark DW hair #0b0b3b and too-light DW shadow #6a7bc4 */
				--susie: #88176a;
				--ralsei: #38705e;
				--noelle: #b15d34; /* darkened for readability from LW skintone #d87d50 */
				--berdly: #36394b;
				--lancer: #406080;
				--queen: #1263bc;
				--jevil: #3c3c97; /* darkened for readbility from #6d6dc0 */
				--friend-pink: #a24b68; /* darkened for readability from #ffaec9 */
				--friend-yellow: #9f9600; /* darkened for readability from #fff200 */
			}
		}

		&[theme=shopleft] { width: calc(var(--basewidth) - 7.2em) }

		&[theme=shopright], &[theme=shopdesc] { width: calc(var(--basewidth) - 14.2em) }

		&[theme=shopright] { padding-inline: 0.4em }

		&[theme=fade] {
			border: unset;
			min-height: calc(var(--baseheight) - 2em);
			width: calc(var(--basewidth) - 2em);
			max-width: calc(100% - 3 * var(--border-width));

			margin: calc(var(--border-width) + 0.2em) calc(var(--border-width) + 0.5em);
			:is([theme=fade], d-option-panel) + & { margin-block-start: calc((2 * var(--border-width)) + 0.2em) }
			:is(h2, h3, h4, h5, h6, p, ul, ol) + & { margin-block-start: calc(var(--border-width) + 1rem) }
			&:has(+ h2, + h3, + h4, + h5, + h6, + p, + ul, + ol) { margin-block-end: calc(var(--border-width) + 1rem) }

			box-shadow:
				0 0
				var(--border-width)	/* blur a lot */
				calc(0.5 * var(--border-width))	/* spread out a bit */
				var(--black);
		}

		&[theme=caller] {
			--border-width: 1rem;
			border-image-source: url("../assets/images/textbox/spikebubble.png");
			border-image-repeat: stretch round;
			border-image-slice: 12 8;
			min-height: calc(var(--baseheight) + 1em);
			width: fit-content;
			margin: 1em;
			padding: 0.5em 1em;
			display: flex;
			flex-direction: column;
			font-family: "DeltaFont Combat", var(--font);
			font-size: 1em;
		}

		&[theme=eightbit], &[theme="8bit"] {
			width: calc(var(--basewidth) - 4.39em);
			font-family: "DeltaFont 8-Bit", var(--font);
		}

		&.hideoverflow {
			white-space: pre;
			max-width: 100%;
			overflow: hidden;
		}

		@media (max-width: 30rem) {
			font-size: 1em;

			/* For boxes with small dialogues, add spacing so dialogue doesn't overlap. ...too much, at least. */
			&:has(d-box) { min-height: 6.5em }
		}

		/* Forced line break */
		.break { display: block }

		img {
			&:is(.fullheight, .fullwidth) { display: block}
			&.fullheight {
				height: 100%;
				grid-row: 1 / span 3;
			}
			&.fullwidth {
				width: 100%;
				grid-column: 1 / span 2;
				
				&.center { justify-self: center }
			}
			&.fullwidth.fullheight { object-fit: contain }
		}

		&:not([theme=objreact], [theme=battletalk]) {
			&:has(
				> d-speaker.kris,
				> d-speaker.susie,
				> d-speaker.ralsei,
				> d-speaker.noelle
			) {
				position: relative;

				&::before {
					content: "";
					position: absolute;
					top: -0.25em;
					left: -2.1em;
					border: 0.2em solid var(--white);
					--size: 1.75em;
					width: var(--size);
					height: var(--size);
					background: var(--black) center / 80% no-repeat;
					border-radius: 25%;
				}
			}
			&:has(> d-speaker.kris)::before { background-image: url("../assets/images/faces/kris/battle.png") }
			&:has(> d-speaker.susie)::before { background-image: url("../assets/images/faces/susie/battle.png") }
			&:has(> d-speaker.ralsei)::before { background-image: url("../assets/images/faces/ralsei/battle.png") }
			&:has(> d-speaker.noelle)::before { background-image: url("../assets/images/faces/noelle/battle.png") }
		}
		&[theme=fade]:has(
			> d-speaker.kris,
			> d-speaker.susie,
			> d-speaker.ralsei,
			> d-speaker.noelle
		)::before {
			top: -0.05em;
			left: -1.9em;
			box-shadow: 0 0 0.2em 0.1em var(--black);
			border: none;
		}
	}

	&:state(compact) {
		margin: 0 0 0 min(1em, 3vw);
		gap: 0 0.5ch;
		align-items: baseline;

		/* On smaller screens, stack dialogue instead */
		@media (max-width: 30rem) {
			display: flex;
			flex-direction: column;

			/* ...but only main dialogue! if there are boxes with only small dialogue, leave them alone. */
			&:has(d-text) {
				padding-inline-start: 3vw;
				& > d-speaker, & > d-sprite d-speaker {
					position: relative;
					left: -3vw;
				}
			}

			d-text ~ d-box { padding-inline-start: 3ch }
		}
	}
}
/* Dialogue boxes only */
d-box {
	display: grid;
	grid-template-columns: auto 1fr;

	&:has(&) {
		position: relative;
	}

	&:not(:state(compact)) {
		/* Align text towards start */
		grid-template-rows: auto auto 1fr;
		
		d-box {
			position: absolute;
			font-size: 0.6em;
			font-family: "DeltaFont Condensed", var(--font);
			/* Reset full-size features */
			background-color: transparent;
			border-image: unset;
			border-inline-width: 0;
			margin: 0;
			width: max-content;
			/* Center content */
			align-items: center;
			
			d-sprite img { --size: 3.2em }

			d-text:first-of-type { margin-block-start: 0.5em }

			/* Specify placements (defaulting to bottom right) */
			&:not([place]), &:not([place~=bottom], [place~=top]),
			&[place~=bottom] { bottom: -2.4em }
			&:not([place]), &:not([place~=right], [place~=left]),
			&[place~=right] { right: 0 }
			&[place~=top] { top: -2.4em }
			&[place~=left] { left: 0 }
			&[place~=center-x] {
				left: 50%;
				transform: translateX(-50%);
			}
			&[place~=center-y] {
				top: 50%;
				transform: translateY(-50%);
			}
			&[place~=center] {
				left: 50%;
				top: 50%;
				transform: translate(-50%, -50%);
			}

			@media (min-width: 30rem) {
				&[place~=bottom][place~=center-x] { bottom: -1.7em }
				&[place~=top][place~=center-x] { top: -1.7em }
			}
		}
	}

	&:state(compact) & {
		grid-column: 2;
		margin-inline-start: 0;
		& d-speaker::before {
			content: "(";
			color: var(--white);
		}
		& > :last-child::after { content: ")" }
	}

	&:has(> d-box:first-child) {
		gap: 0;

		d-speaker::before,
		d-box > :last-child::after { content: unset }
	}
}
/* Talksprites */
d-sprite {
	grid-row: 1 / span 3;
	grid-column: 1;
	d-box:state(compact) & { display: contents }

	/* Center sprite */
	d-box:not(:state(compact)) & {
		display: flex;
		align-items: center;
		margin-inline-end: 1ch;
	}

	img {
		--size: 4em;
		width: var(--size);
		height: var(--size);
		object-fit: contain;
		body:not(.noanim) &[src$=".gif"] + &[src$=".png"],
		body.noanim &[src$=".gif"],
		d-box:state(compact) & { display: none }
	}

	&[format=shop] {
		font-size: 1.2em;
		@media (max-width: 30rem) { font-size: 1em }

		img {
			display: block;
			width: 100%;
			margin: 0 0.5em;
			height: auto;
			object-position: center;
			max-width: var(--basewidth);
			max-height: 8em;
		}

		&:has(+ d-box[theme=shopleft]) img { max-width: calc(var(--basewidth) - 7.2em) }
		&:has(+ d-box[theme=shopright]) img { max-width: calc(var(--basewidth) - 14.2em) }

		body.compact & { display: none }
	}

}
/* Speaker labels */
d-speaker {
	color: var(--lightyellow);
	&::after { content: ":" }
	d-box:not([theme=battletalk], [theme=objreact]):not(:state(compact)) & {
		position: absolute;
		top: 0;
		left: 0;
		font-size: 1rem;
		opacity: 0;
		pointer-events: none;
	}
	d-box:not(:state(compact)) d-sprite > & { display: none }
	d-box:state(compact) & {
		grid-column: 1;
		grid-row: 1 / span 3;
	}
}
/* Single line of text within a dialogue box
 * Automatically formats with asterisks, fonts, and speaker icons
 */
d-text {
	grid-column: 2;
	line-height: 1.4;

	&[font=tiny] {
		font-family: "DeltaFont Tiny", var(--font);
		max-width: 10.6em;
	}

	&[font=sans] {
		font-family: "DeltaFont Comic Sans", var(--font);
	}

	&[font=eightbit], &[font="8bit"] {
		font-family: "DeltaFont 8-Bit", var(--font);
	}

	&[asterisk] {
		padding-inline-start: 2ch;
		text-indent: -2ch;

		&::before {
			content: "*";
			margin-inline-end: 1ch;
		}
	}

	&[asterisk="Sweet" i],
	&[asterisk="Cap'n" i], &[asterisk="Capn" i],
	&[asterisk="K_K" i], &[asterisk="KK" i],
	&[asterisk="Happy" i], &[asterisk="Nice" i],
	&[asterisk="Mad" i], &[asterisk="Mean" i],
	&[asterisk="Sad" i], &[asterisk="Shy" i] {
		position: relative;
		padding-inline-start: 1.25em;
		text-indent: unset;

		&::before {
			position: absolute;
			left: 0;
			top: 0.15em;
			content: "";
			color: transparent;
			width: var(--size, 1em);
			height: var(--size, 1em);
			background: center / contain no-repeat;
		}
	}
	body:not(.compact) [theme=battletalk] &:is(
		[asterisk="Happy" i], [asterisk="Nice" i],
		[asterisk="Mad" i], [asterisk="Mean" i],
		[asterisk="Sad" i], [asterisk="Shy" i]
	) {
		padding-inline-start: 0;
		&::before {
			filter: drop-shadow(0 0 2px var(--black));
			--size: 2em;
			top: -1.5em;
			left: -1.5em;
		}
	}

	&:is([asterisk="Sweet" i])::before {
		background-image: url("../assets/images/faces/sweetcapncakes/sweet.gif");
		content: "(Sweet)";
	}
	&:is([asterisk="Cap'n" i], [asterisk="Capn" i])::before {
		background-image: url("../assets/images/faces/sweetcapncakes/capn.gif");
		content: "(Cap'n)";
	}
	&:is([asterisk="K_K" i], [asterisk="KK" i])::before {
		background-image: url("../assets/images/faces/sweetcapncakes/kk.gif");
		content: "(K_K)";
	}
	body.noanim & {
		&:is([asterisk="Sweet" i])::before { background-image: url("../assets/images/faces/sweetcapncakes/sweet.png") }
		&:is([asterisk="Cap'n" i], [asterisk="Capn" i])::before { background-image: url("../assets/images/faces/sweetcapncakes/capn.png") }
		&:is([asterisk="K_K" i], [asterisk="KK" i])::before { background-image: url("../assets/images/faces/sweetcapncakes/kk.png") }
	}
	&:is([asterisk="Happy" i], [asterisk="Nice" i])::before {
		background-image: url("../assets/images/faces/clover/happy.png");
		content: "(Nice)";
	}
	&:is([asterisk="Mad" i], [asterisk="Mean" i])::before {
		background-image: url("../assets/images/faces/clover/mad.png");
		content: "(Mean)";
	}
	&:is([asterisk="Sad" i], [asterisk="Shy" i])::before {
		background-image: url("../assets/images/faces/clover/sad.png");
		content: "(Shy)";
	}

	img.inline {
		height: 1em;
		width: auto;
		vertical-align: text-bottom;
	}
}
/* Choice menus only */
d-choices {
	&:not(:state(compact)) {
		display: grid;
		--side-width: 5em;
		grid-template-columns: 1fr auto 1fr;
		padding: 0;
		align-items: center;
		position: relative;

		/* Heart-shaped selector icon
		To be displayed when none of the options are being considered or selected */
		&:not(:has(d-option:hover), :focus-within, :has([aria-expanded="true"])),
		&[noninteractive], &:state(forced):not(:has(d-option:hover), :focus-within) {
			&::after {
				content: "";
				background: url("../assets/images/heart.png") center / contain no-repeat;
				width: var(--size);
				height: var(--size);
				position: absolute;
				left: 9em;
				top: 1.7em;
				--size: 0.75em;
			}
			&[theme=battlemenu]::after { left: 11em }

			&[offset]::after { left: calc(9em + var(--offset)) }
			&[offset][theme=battlemenu]::after { left: calc(11em + var(--offset)) }
		}
	}

	/* Option sizing WITHIN a menu (fullsize mode) */
	d-option {
		width: max-content;
		position: absolute;
		line-height: 1.2;

		/* Left/right */
		&[index="0"], &[index="1"] {
			top: 50%;
			transform: translateY(-50%);
		}
		/* Up/down */
		&[index="2"], &[index="3"] {
			left: 50%;
			transform: translateX(-50%);
		}

		&[index="0"] { left: 1.24em }
		&[index="1"] { right: 0.15em }
		&[index="2"] { top: -0.1em }
		&[index="3"] { bottom: -0.2em }
	}

	/* Asterisk marker */
	.conditional {
		position: absolute;
		left: calc(100% + 0.2em);
		top: 0;
	}

	/* In compact mode, all the options get moved alongside their tabs; hide the resulting empty menu */
	&:state(compact) { display: none }
}
/* Options in choice menus */
d-option {
	display: block;
	font-family: "DeltaFont Condensed", var(--font);

	/* Selectable options */
	d-choices:not([noninteractive]) &,
	:not(d-choices) > &:has(+ d-option-panel) {
		cursor: pointer;

		&:hover, &:focus,
		&[aria-expanded=true] {
			color: var(--yellow);
		}
		/* Heart-shaped hover indicator */
		&::before {
			content: "";
			background: center / contain no-repeat;
			width: var(--size);
			height: var(--size);
			position: absolute;
			left: -0.5em;
			top: calc(50% - (0.55 * var(--size)));
			--size: 0.75em;
		}
		&:is(:hover, :focus)::before,
		&[aria-expanded=true]::before {
			background-image: url("../assets/images/heart.png");
		}
	}

	/* Adjust placement of heart-shaped hover indicator inside choice menus */
	d-choices:not([noninteractive]) &::before {
		left: -1.75ch;
		top: 0.15em;
	}

	/* Hide the hearts/highlights when choices are forced open */
	d-choices:state(forced) &:not(:hover, :focus) {
		color: var(--white);
		&::before { content: unset }
	}

	/* Non-selectable options */
	d-choices[noninteractive] &,
	/* Options with no linked panels */
	:not(d-choices) > &:not(:has(+ d-option-panel)) {
		cursor: not-allowed;
	}

	/* Compact mode */
	:not(d-choices) > & {
		position: relative;
		border: var(--border-width) solid transparent;
		border-block-width: calc(var(--border-width) * 0.5);
		border-image: url("../assets/images/textbox/light_transparent.png") 16 / var(--border-width) / calc(0.25 * var(--border-width));
		body.dim & { border-image-source: url("../assets/images/textbox/light_transparent_dim.png") }
		/* Spacing */
		margin: 0.3em;
		/* Heart-shaped hover indicator */
		padding-inline-start: 0.8em;
		&::before { --size: 0.6em }

		.conditional {
			float: inline-end;
		}
	}

	/* Asterisk marker */
	.conditional {
		color: var(--gray);
		padding: 0.5em;
		margin: -0.5em;
		cursor: help;
	}

	body.compact & :is(.hide, .break) { display: none }
}
/* Panel containing the result of choosing an option in a choice menu */
d-option-panel {
	display: block;
	border: var(--border-width) solid transparent;
	border-image: url("../assets/images/textbox/light_transparent.png") 16 / var(--border-width);
	body.dim &:not([theme]), body.dim &[theme=light] { border-image-source: url("../assets/images/textbox/light_transparent_dim.png") }

	&[theme=dark] { border-image-source: url("../assets/images/textbox/dark_transparent.gif") }
	body.dim &[theme=dark] { border-image-source: url("../assets/images/textbox/dark_transparent_dim.gif") }

	/* Spacing */
	margin: 0.3em 0;
	d-choices:not(:state(compact)) ~ & { margin-inline-start: min(1.2em, 3vw) }
	d-choices:state(compact) ~ & { margin-inline-start: min(0.8em, 2vw) }
	padding: 0.1em;

	/* Expanded mode: hide collapsed panels, and labels when panels aren't forced */
	d-choices:not(:state(compact)) ~ &:state(collapsed),
	d-choices:not(:state(compact)) ~ &:not(:state(forced)) .selection-label,
	/* Compact mode: hide collapsed panels, and labels regardless (the toggles will act as labels instead) */
	d-choices:state(compact) ~ &:state(collapsed),
	d-choices:state(compact) ~ & .selection-label {
		display: none;
	}

	.selection-label {
		color: var(--gray);
	}

	/* First child will always be selection-label */
	& > :nth-child(2) { margin-block-start: 0 !important }
	& > :last-child { margin-block-end: 0 !important }
}
/* For simultaneous talk bubbles in encounters */
.boxgroup {
	display: flex;
	flex-wrap: wrap;

	&:has(
		[theme=battletalk] :is(
			[asterisk="Happy" i], [asterisk="Nice" i],
			[asterisk="Mad" i], [asterisk="Mean" i],
			[asterisk="Sad" i], [asterisk="Shy" i]
		)
	) {
		margin-block-start: 0.75em;
	}
}
/* Character icons for ACTs */
.acticon {
	height: 0.75em;
	width: auto;
	vertical-align: baseline;
	margin-inline-end: 0.2ch;
}
/* Character profiles from the Recruits menu */
.profile {
	display: grid;
	align-items: center;
	background-color: var(--black);
	border: var(--border-width) solid transparent;
	border-image: url("../assets/images/textbox/light.png") 16 / var(--border-width);
	body.dim & { border-image-source: url("../assets/images/textbox/light_dim.png") }
	font-size: 1.2em;
	font-family: "DeltaFont Condensed", var(--font);
	max-width: 35em;
	margin-inline: auto;
	
	@media (min-width: 30rem) {
		grid-template-columns: 1fr auto;
		h3 { grid-column: 1 }
		.chapter {
			grid-column: 2;
			text-align: right;
			margin-block-end: 0;
		}
		.desc { grid-column: 1 / span 2 }
		.stats-text { grid-column: 1 }
		.stats-num {
			text-align: right;
			grid-column: 2;
			.stat {
				display: flex;
				column-gap: 1ch;
				justify-content: end;
			}

			dd { min-width: 3ch }
		}
	}
	@media (max-width: 30rem) {
		.stats-num {
			display: grid;
			grid-template-columns: auto 1fr;
			column-gap: 1ch;
		}
		.stat { display: contents }
	}

	h3 {
		font-size: 1.2em;
		margin-block: 0;
	}
	.chapter {
		grid-row: 1;
		text-transform: uppercase;
		margin-block-start: 0;
	}
	.desc {
		font-size: 0.9em;
		font-family: "DeltaFont Combat", var(--font);
		max-width: calc(var(--basewidth) - 3.4em);
		margin-block: 0.5em 1em;
		word-break: keep-all;
	}
	
	dl { margin-block: 0 }

	.stats-text {
		display: grid;
		grid-template-columns: auto 1fr;
		column-gap: 1ch;
	}
	
	dt {
		text-transform: uppercase;
	}
	
	dd { margin: 0 }
}
/* #endregion */